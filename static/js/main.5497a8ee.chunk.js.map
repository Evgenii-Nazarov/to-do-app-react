{"version":3,"sources":["Note.js","App.js","serviceWorker.js","index.js"],"names":["Note","props","useState","isUpdateButtonClicked","setIsUpdateButtonClicked","updatedNote","setUpdatedNote","className","Card","style","width","Button","variant","size","disabled","number","onClick","movingUp","_id","listLength","movingDown","name","type","value","placeholder","onChange","e","target","updateNoteButtonHandler","ButtonGroup","aria-label","isNoteDone","doAgainButtonHandler","doneButtonHandler","remove","App","noteName","isDone","noteList","setNoteList","newNote","setNewNote","deleteNoteButtonHandler","newNoteList","filter","el","index","findIndex","map","note","i","key","length","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5497a8ee.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from \"react-bootstrap/Card\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\n\r\nfunction Note(props) {\r\n\r\n    const [isUpdateButtonClicked, setIsUpdateButtonClicked] = useState(false);\r\n    const [updatedNote, setUpdatedNote] = useState('');\r\n\r\n\r\n    const updateButtonHandler = () => {\r\n        setIsUpdateButtonClicked(true)\r\n    };\r\n\r\n    const updateNoteHandler = (e) => {\r\n        setUpdatedNote(e.target.value);\r\n    };\r\n\r\n    const updateNoteButtonHandler = (_id,updatedNote) => {\r\n\r\n        setIsUpdateButtonClicked(false);\r\n        setUpdatedNote('');\r\n        props.updateNoteButtonHandler(_id,updatedNote)\r\n    };\r\n\r\n    const updateNoteCancelButtonHandler = () => {\r\n        setIsUpdateButtonClicked(false);\r\n        setUpdatedNote('');\r\n    };\r\n\r\n    return (\r\n        <div className='note'>\r\n            <Card style={{width: '35rem'}}>\r\n                <div className='row'>\r\n                    <div className='col'>\r\n\r\n                        <div className='col'>\r\n                            <Button variant=\"outline-primary\" size=\"sm\" disabled={!(props.number)}\r\n                                    onClick={() => props.movingUp(props._id)}>↑</Button>\r\n                        </div>\r\n                        <div className='col'>\r\n                            <Button variant=\"outline-primary\" size=\"sm\"\r\n                                    disabled={!(props.listLength - props.number - 1)}\r\n                                    onClick={() => props.movingDown(props._id)}>↓</Button>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className='col'>\r\n                        <li> {props.name}</li>\r\n                    </div>\r\n                    {(!isUpdateButtonClicked) ?\r\n                        <div className='col'>\r\n                            <ButtonGroup aria-label=\"Basic example\">\r\n                                {\r\n                                    (!props.isNoteDone) ?\r\n\r\n                                        <Button variant='outline-success'\r\n                                                onClick={() => props.doneButtonHandler(props._id)}>Complete</Button>\r\n                                        :\r\n                                        <Button variant='outline-warning'\r\n                                                onClick={() => props.doAgainButtonHandler(props._id)}>Undone</Button>\r\n\r\n                                }\r\n\r\n                                <Button variant='outline-primary' onClick={() => updateButtonHandler()}>update</Button>\r\n\r\n                                <Button variant='outline-danger' onClick={() => props.remove(props._id)}>delete</Button>\r\n\r\n                            </ButtonGroup>\r\n                        </div>\r\n                        :\r\n                        <div className='col'>\r\n                            <input type=\"text\" value={updatedNote} placeholder='input updated note'\r\n                                   onChange={updateNoteHandler}/>\r\n                            <Button variant='outline-warning' onClick={() => updateNoteButtonHandler(props._id,updatedNote)}>update</Button>\r\n                            <Button variant='outline-danger' onClick={() => updateNoteCancelButtonHandler()}>cancel</Button>\r\n                        </div>\r\n                    }\r\n\r\n                </div>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Note;\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport Note from \"./Note\";\n\nfunction App() {\n\n\n    const [noteList, setNoteList] = useState([\n            {noteName: 'Note 1', _id: '123', isDone: false},\n            {noteName: 'Note 2', _id: '234', isDone: false},\n            {noteName: 'Note 3', _id: '345', isDone: false},\n        ]\n    );\n    const [newNote, setNewNote] = useState('');\n\n    const addNewNoteHandler = (e) => {\n        setNewNote(e.target.value)\n    };\n\n    const addNoteButtonHandler = () => {\n        const newNoteList = [...noteList,\n            {\n                noteName: newNote,\n                _id: Math.random()\n            }];\n        setNoteList(newNoteList);\n        setNewNote('');\n    };\n\n    const deleteNoteButtonHandler = _id => {\n        const newNoteList = noteList.filter(el => el._id !== _id);\n        setNoteList(newNoteList);\n    };\n\n    const movingUp = _id => {\n        let index = noteList.findIndex(e => e._id === _id);\n        let el = noteList[index];\n        let newNoteList = [...noteList];\n        newNoteList[index] = noteList[index - 1];\n        newNoteList[index - 1] = el;\n        setNoteList(newNoteList);\n    };\n    const movingDown = _id => {\n        let index = noteList.findIndex(e => e._id === _id);\n        let el = noteList[index];\n        let newNoteList = [...noteList];\n        newNoteList[index] = noteList[index + 1];\n        newNoteList[index + 1] = el;\n        setNoteList(newNoteList);\n    };\n\n    const doneButtonHandler = (_id) => {\n        const newNoteList = noteList.map(el => {\n            if (el._id === _id) return {...el, isDone: true};\n            return el\n        });\n        setNoteList(newNoteList)\n    };\n    const doAgainButtonHandler = (_id) => {\n        const newNoteList = noteList.map(el => {\n            if (el._id === _id) return {...el, isDone: false};\n            return el\n        });\n        setNoteList(newNoteList)\n    };\n    const updateNoteButtonHandler = (_id,note) => {\n        const newNoteList = noteList.map(el => {\n            if (el._id === _id) return {...el, noteName: note};\n            return el\n        });\n        setNoteList(newNoteList)\n    };\n\n    return (\n        <div className='container'>\n            <h3>Note app</h3>\n            {\n                noteList.map((el, i) => <Note _id={el._id}\n                                              key={el._id}\n                                              name={el.noteName}\n                                              isNoteDone={el.isDone}\n                                              remove={deleteNoteButtonHandler}\n                                              movingUp={movingUp}\n                                              movingDown={movingDown}\n                                              number={i}\n                                              listLength={noteList.length}\n                                              doneButtonHandler={doneButtonHandler}\n                                              doAgainButtonHandler={doAgainButtonHandler}\n                                              updateNoteButtonHandler={updateNoteButtonHandler}\n                />)\n            }\n            <input type=\"text\" value={newNote} placeholder='input new note' onChange={addNewNoteHandler}/>\n            <button className=\"btn btn-primary\" onClick={addNoteButtonHandler}>add</button>\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}